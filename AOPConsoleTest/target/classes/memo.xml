<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">
		
<!-- AOP를 설정하기 위한 파일(주업무와 보조업무를 이곳에서 엮어준다.) -->

<!-- 주업무 객체 -->
<bean id="memo" class="com.test.memo.Memo" />


<!-- 보조업무 객체 -->
<bean id="logger" class="com.test.memo.Logger" />


<!-- Aspect 설정 -->
<aop:config>

	<!-- ref 속성으로 logger 객체(보조업무 주체)를 참조 -->
	<aop:aspect id="loggerAdvice" ref="logger">
	
		<!-- 적용할 대상인 Pointcut 선언 -->
		<!-- => 추후에 AspectJ 설명을 통해서 expression 표현을 설명할 예정 
		     => 일단 Memo 클래스내의 모든 메소드에 대해서 Advice를 적용하겠다는 뜻 -->
		<aop:pointcut expression="execution(public * com.test.memo.Memo.*(..)) " id="m1" />
		<!-- 이 뜻은 해당클래스의 모든 클래스를 실행하는 시간 (..)는 or이다.[있으면하고 없으면 말고] -->
		
		<!-- Around Advice 적용
			=> logger 객체의 around 메소드를 m1 이라는 Pointcut에 적용하겠다.
			=> 즉, Memo.write() 메소드 (==>m1)가 실행되면 Around Advice 방식으로 
			   Logger.around()메소드를 적용시키겠다.  -->
		<!-- <aop:around method="around" pointcut-ref="m1" /> -->
		
		<!-- Before Advice 적용 
			=> 메모 작성(수정)하기 전에 해당 날짜 시간을 로그에 기록하는 보조업무를 추가
			=> 이번엔 새로운 Advice(보조업무)를 추가할 것이기 때문에 보조업무 객체를 편집.
			
			Before Advice 적용
			=> 동일한 Pointcut(메소드)에 적용할 것이라서 pointcut-ref 는 그대로 사용하고
			   Before Advice 만 추가하면 된다.
		-->
		<!-- <aop:before method="before" pointcut-ref="m1" /> -->
		
		
		
		<!-- After Advice 적용 
			=> 메모 작성(수정)하기 전에 해당 날짜 시간을 로그에 기록하는 보조업무를 추가
			=> 이번엔 새로운 Advice(보조업무)를 추가할 것이기 때문에 보조업무 객체를 편집.
			
			After Advice 적용
			=> 동일한 Pointcut(메소드)에 적용할 것이라서 pointcut-ref 는 그대로 사용하고
			   Before Advice 만 추가하면 된다.
		-->
		<!-- <aop:after method="after" pointcut-ref="m1" /> -->
		
		<!-- After Returning Advice 적용
		    => 주업무로 부터 반환받는 값을 명시한다. (returning="abc")
		    => 보조 객체의 파라미터명과 returning의 파라미터명이 동일해야 한다.
		    ==> After Returning Advice 가 사용되어지는 경우는 일반적으로
		                주업무에서 생성된 데이터(결과값 등)를 보조업무에 넘겨서 연계해야 하는 경우에 사용되는 Advice이다.
		         단!!!!!!!, Around 와 After Returning 을 동시에 사용하면 After Returning 이 반환값을 받지 못하기 때문에 
		               Around 와 After Returning 을 동시에 사용불가하다.
		               After Returning 을 사용하려면 Around 는 제거되어져야 한다.
		     -->
		<aop:after-returning method="afterReturning" pointcut-ref="m1" returning="seq" />
		
		<!-- After Throwing Advice 적용
			=> 주업무에서 예외가 발생하면 실행되는 보조업무
			=> 보조객체의 인자명(파라미터명)과 throwing 의 인자명(파라미터명)은 동일해야 한다.
		-->
		<aop:after-throwing method="afterThrowing" pointcut-ref="m1" throwing="e" />
		
		
	</aop:aspect>
	
</aop:config>


</beans>